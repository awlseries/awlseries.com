// components/CountryPicker.jsx
import React, { useState, useEffect } from 'react';
import { updateDoc, doc, serverTimestamp } from 'firebase/firestore';
import { db, auth } from '../firebase';
import Flag from 'react-world-flags';
import { showSingleNotification } from '/utils/notifications';

const CountryPicker = ({ isOpen, onClose, currentCountry, onCountrySelect, disabled = false }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [countries, setCountries] = useState([]);

  const countryList = [
    { code: 'ru', name: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫' },
    { code: 'us', name: '–°–®–ê', flag: 'üá∫üá∏' },
    { code: 'de', name: '–ì–µ—Ä–º–∞–Ω–∏—è', flag: 'üá©üá™' },
    { code: 'fr', name: '–§—Ä–∞–Ω—Ü–∏—è', flag: 'üá´üá∑' },
    { code: 'gb', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', flag: 'üá¨üáß' },
    { code: 'jp', name: '–Ø–ø–æ–Ω–∏—è', flag: 'üáØüáµ' },
    { code: 'kr', name: '–ö–æ—Ä–µ—è', flag: 'üá∞üá∑' },
    { code: 'cn', name: '–ö–∏—Ç–∞–π', flag: 'üá®üá≥' },
    { code: 'br', name: '–ë—Ä–∞–∑–∏–ª–∏—è', flag: 'üáßüá∑' },
    { code: 'in', name: '–ò–Ω–¥–∏—è', flag: 'üáÆüá≥' },
    { code: 'ca', name: '–ö–∞–Ω–∞–¥–∞', flag: 'üá®üá¶' },
    { code: 'au', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', flag: 'üá¶üá∫' },
    { code: 'it', name: '–ò—Ç–∞–ª–∏—è', flag: 'üáÆüáπ' },
    { code: 'es', name: '–ò—Å–ø–∞–Ω–∏—è', flag: 'üá™üá∏' },
    { code: 'ua', name: '–£–∫—Ä–∞–∏–Ω–∞', flag: 'üá∫üá¶' },
    { code: 'kz', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', flag: 'üá∞üáø' },
    { code: 'by', name: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
    { code: 'pl', name: '–ü–æ–ª—å—à–∞', flag: 'üáµüá±' },
    { code: 'tr', name: '–¢—É—Ä—Ü–∏—è', flag: 'üáπüá∑' },
    { code: 'nl', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', flag: 'üá≥üá±' },
    { code: 'se', name: '–®–≤–µ—Ü–∏—è', flag: 'üá∏üá™' },
    { code: 'no', name: '–ù–æ—Ä–≤–µ–≥–∏—è', flag: 'üá≥üá¥' },
    { code: 'fi', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è', flag: 'üá´üáÆ' },
    { code: 'dk', name: '–î–∞–Ω–∏—è', flag: 'üá©üá∞' },
  ];

  useEffect(() => {
    setCountries(countryList);
  }, []);

  useEffect(() => {
    if (searchTerm) {
      const filtered = countryList.filter(country =>
        country.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setCountries(filtered);
    } else {
      setCountries(countryList);
    }
  }, [searchTerm]);

  const handleCountryClick = (country) => {
    if (disabled) {
      return; // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    }
    onCountrySelect(country);
  };

  const handleCountrySelect = async (country) => {
    try {
      const user = auth.currentUser;
      if (user) {
        await updateDoc(doc(db, 'users', user.uid), {
          country: country.code,
          countryName: country.name,
          lastUpdate: serverTimestamp()
        });
        
        onCountrySelect(country);
        showSingleNotification(`‚úì –°—Ç—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${country.name}`);
        onClose();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã:', error);
      showSingleNotification('‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã', true);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
  const getDisplayCountry = () => {
    if (!currentCountry || currentCountry === 'EMPTY') {
      return '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É';
    }
    const country = countryList.find(c => c.code === currentCountry);
    return country ? country.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  if (!isOpen) return null;

  return (
    <div className="country-picker-modal" style={{ display: 'flex' }}>
      <div className="country-picker-content">
        <button 
            className="feedback-close-btn"
            onClick={onClose}
          >
            √ó
          </button>
        <div className="country-picker-header">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</h3>
        </div>
        
        <div className="country-search-container">
          <input
            type="text"
            className="country-search-input"
            placeholder="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="countries-list">
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ */}
          {(currentCountry === 'EMPTY' || !currentCountry) && (
            <div className="country-notice">
              <span>–°—Ç—Ä–∞–Ω—É –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</span>
            </div>
          )}
          
          {countries.map((country) => (
    <div
      key={country.code}
      className={`country-item ${currentCountry === country.code ? 'selected' : ''} ${disabled ? 'disabled' : ''}`}
      onClick={() => handleCountryClick(country)}
      style={{
        cursor: disabled ? 'not-allowed' : 'pointer',
        opacity: disabled ? 0.5 : 1
      }}
    >
            {/* –ó–∞–º–µ–Ω–∏—Ç–µ —ç–º–æ–¥–∑–∏ –Ω–∞ react-world-flags */}
            <span className="country-flag">
              <Flag 
                code={country.code} 
                style={{ 
                  width: '25px', 
                  height: '18px',
                  borderRadius: '2px',
                  objectFit: 'cover'
                }}
              />
            </span>
            <span className="country-name">{country.name}</span>
            {currentCountry === country.code && (
              <span className="country-selected-badge">‚úì</span>
            )}
          </div>
        ))}
      </div>
    </div>
    </div>
  );
};

export default CountryPicker;