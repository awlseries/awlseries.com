// components/CountryPicker.jsx
import React, { useState, useEffect, lazy, Suspense } from 'react';
import { supabase } from '../supabase';
import { showSingleNotification } from '/utils/notifications';

const Flag = lazy(() => import('react-world-flags'));

const CountryPicker = ({ isOpen, onClose, currentCountry, onCountrySelect, disabled = false }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [countries, setCountries] = useState([]);

  const countryList = [
    { code: 'ru', name: '–†–æ—Å—Å–∏—è', flag: 'üá∑üá∫' },
    { code: 'us', name: '–°–®–ê', flag: 'üá∫üá∏' },
    { code: 'de', name: '–ì–µ—Ä–º–∞–Ω–∏—è', flag: 'üá©üá™' },
    { code: 'fr', name: '–§—Ä–∞–Ω—Ü–∏—è', flag: 'üá´üá∑' },
    { code: 'gb', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', flag: 'üá¨üáß' },
    { code: 'jp', name: '–Ø–ø–æ–Ω–∏—è', flag: 'üáØüáµ' },
    { code: 'kr', name: '–ö–æ—Ä–µ—è', flag: 'üá∞üá∑' },
    { code: 'cn', name: '–ö–∏—Ç–∞–π', flag: 'üá®üá≥' },
    { code: 'br', name: '–ë—Ä–∞–∑–∏–ª–∏—è', flag: 'üáßüá∑' },
    { code: 'in', name: '–ò–Ω–¥–∏—è', flag: 'üáÆüá≥' },
    { code: 'ca', name: '–ö–∞–Ω–∞–¥–∞', flag: 'üá®üá¶' },
    { code: 'au', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', flag: 'üá¶üá∫' },
    { code: 'it', name: '–ò—Ç–∞–ª–∏—è', flag: 'üáÆüáπ' },
    { code: 'es', name: '–ò—Å–ø–∞–Ω–∏—è', flag: 'üá™üá∏' },
    { code: 'ua', name: '–£–∫—Ä–∞–∏–Ω–∞', flag: 'üá∫üá¶' },
    { code: 'kz', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', flag: 'üá∞üáø' },
    { code: 'by', name: '–ë–µ–ª–∞—Ä—É—Å—å', flag: 'üáßüáæ' },
    { code: 'pl', name: '–ü–æ–ª—å—à–∞', flag: 'üáµüá±' },
    { code: 'tr', name: '–¢—É—Ä—Ü–∏—è', flag: 'üáπüá∑' },
    { code: 'nl', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', flag: 'üá≥üá±' },
    { code: 'se', name: '–®–≤–µ—Ü–∏—è', flag: 'üá∏üá™' },
    { code: 'no', name: '–ù–æ—Ä–≤–µ–≥–∏—è', flag: 'üá≥üá¥' },
    { code: 'fi', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è', flag: 'üá´üáÆ' },
    { code: 'dk', name: '–î–∞–Ω–∏—è', flag: 'üá©üá∞' },
    { code: 'mx', name: '–ú–µ–∫—Å–∏–∫–∞', flag: 'üá≤üáΩ' },
    { code: 'id', name: '–ò–Ω–¥–æ–Ω–µ–∑–∏—è', flag: 'üáÆüá©' },
    { code: 'sa', name: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è', flag: 'üá∏üá¶' },
    { code: 'za', name: '–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞', flag: 'üáøüá¶' },
    { code: 'eg', name: '–ï–≥–∏–ø–µ—Ç', flag: 'üá™üá¨' },
    { code: 'ar', name: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', flag: 'üá¶üá∑' },
    { code: 'pt', name: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è', flag: 'üáµüáπ' },
    { code: 'gr', name: '–ì—Ä–µ—Ü–∏—è', flag: 'üá¨üá∑' },
    { code: 'cz', name: '–ß–µ—Ö–∏—è', flag: 'üá®üáø' },
    { code: 'ch', name: '–®–≤–µ–π—Ü–∞—Ä–∏—è', flag: 'üá®üá≠' },
    { code: 'at', name: '–ê–≤—Å—Ç—Ä–∏—è', flag: 'üá¶üáπ' },
    { code: 'be', name: '–ë–µ–ª—å–≥–∏—è', flag: 'üáßüá™' },
    { code: 'il', name: '–ò–∑—Ä–∞–∏–ª—å', flag: 'üáÆüá±' },
    { code: 'th', name: '–¢–∞–∏–ª–∞–Ω–¥', flag: 'üáπüá≠' },
    { code: 'vn', name: '–í—å–µ—Ç–Ω–∞–º', flag: 'üáªüá≥' },
    { code: 'my', name: '–ú–∞–ª–∞–π–∑–∏—è', flag: 'üá≤üáæ' },
    { code: 'sg', name: '–°–∏–Ω–≥–∞–ø—É—Ä', flag: 'üá∏üá¨' },
    { code: 'ph', name: '–§–∏–ª–∏–ø–ø–∏–Ω—ã', flag: 'üáµüá≠' },
    { code: 'ie', name: '–ò—Ä–ª–∞–Ω–¥–∏—è', flag: 'üáÆüá™' },
    { code: 'hu', name: '–í–µ–Ω–≥—Ä–∏—è', flag: 'üá≠üá∫' },
    { code: 'ro', name: '–†—É–º—ã–Ω–∏—è', flag: 'üá∑üá¥' },
    { code: 'bg', name: '–ë–æ–ª–≥–∞—Ä–∏—è', flag: 'üáßüá¨' },
    { code: 'hr', name: '–•–æ—Ä–≤–∞—Ç–∏—è', flag: 'üá≠üá∑' },
    { code: 'rs', name: '–°–µ—Ä–±–∏—è', flag: 'üá∑üá∏' },
    { code: 'sk', name: '–°–ª–æ–≤–∞–∫–∏—è', flag: 'üá∏üá∞' },
    { code: 'si', name: '–°–ª–æ–≤–µ–Ω–∏—è', flag: 'üá∏üáÆ' },
    { code: 'ee', name: '–≠—Å—Ç–æ–Ω–∏—è', flag: 'üá™üá™' },
    { code: 'lv', name: '–õ–∞—Ç–≤–∏—è', flag: 'üá±üáª' },
    { code: 'lt', name: '–õ–∏—Ç–≤–∞', flag: 'üá±üáπ' },
    { code: 'is', name: '–ò—Å–ª–∞–Ω–¥–∏—è', flag: 'üáÆüá∏' },
    { code: 'lu', name: '–õ—é–∫—Å–µ–º–±—É—Ä–≥', flag: 'üá±üá∫' },
    { code: 'mt', name: '–ú–∞–ª—å—Ç–∞', flag: 'üá≤üáπ' },
  ];

  useEffect(() => {
    setCountries(countryList);
  }, []);

  useEffect(() => {
    if (searchTerm) {
      const filtered = countryList.filter(country =>
        country.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setCountries(filtered);
    } else {
      setCountries(countryList);
    }
  }, [searchTerm]);

  const handleCountryClick = async (country) => {
  if (disabled) {
    return; // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
  }
  
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      const { error } = await supabase
        .from('users')
        .update({
          country: country.code,
          countryName: country.name,
          lastUpdate: new Date().toISOString()
        })
        .eq('id', user.id);

      if (error) {
        throw error;
      }
      
      onCountrySelect(country);
      showSingleNotification(`‚úì –°—Ç—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${country.name}`);
      onClose();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã:', error);
    showSingleNotification('‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã', true);
  }
};

  if (!isOpen) return null;

 return (
    <div className="country-picker-modal" style={{ display: 'flex' }}>
      <div className="country-picker-content">
        <button 
            className="feedback-close-btn"
            onClick={onClose}
          >
            √ó
          </button>
        <div className="country-picker-header">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</h3>
        </div>
        
        <div className="country-search-container">
          <input
            type="text"
            className="country-search-input"
            placeholder="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="countries-list">
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ */}
          {(currentCountry === 'EMPTY' || !currentCountry) && (
            <div className="country-notice">
              <span>–°—Ç—Ä–∞–Ω—É –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</span>
            </div>
          )}
          
          {countries.map((country) => (
            <div
              key={country.code}
              className={`country-item ${currentCountry === country.code ? 'selected' : ''} ${disabled ? 'disabled' : ''}`}
              onClick={() => handleCountryClick(country)}
              style={{
                cursor: disabled ? 'not-allowed' : 'pointer',
                opacity: disabled ? 0.5 : 1
              }}
            >
              <span className="country-flag">
                <Suspense fallback={
                  <div style={{
                    width: '25px',
                    height: '18px',
                    backgroundColor: '#b2ad9c',
                    borderRadius: '2px'
                  }}></div>
                }>
                  <Flag 
                    code={country.code} 
                    style={{ 
                      width: '25px', 
                      height: '18px',
                      borderRadius: '2px',
                      objectFit: 'cover'
                    }}
                  />
                </Suspense>
              </span>
              <span className="country-name">{country.name}</span>
              {currentCountry === country.code && (
                <span className="country-selected-badge">‚úì</span>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CountryPicker;