import React, { lazy, Suspense } from 'react';
import { useState, useEffect } from 'react';
import { showSingleNotification } from '/utils/notifications';
import CountryPicker from '../../components/CountryPicker';
import { supabase } from '../../supabase';
import { useLanguage } from '/utils/language-context.jsx';
import '/src/styles.css';
import { useNavigate } from 'react-router-dom';
import './ProfileInfo.css';
import SEO from '../../components/Seo/Seo';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ react-world-flags
const Flag = lazy(() => import('react-world-flags').then(module => {
  return { default: module.default };
}));

const Profile = () => {
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [hasAgeBeenSet, setHasAgeBeenSet] = useState(false);
  const [isEditingNickname, setIsEditingNickname] = useState(false);
  const [editedNickname, setEditedNickname] = useState('');
  const [canEditNickname, setCanEditNickname] = useState(true);
  const [nicknameCooldown, setNicknameCooldown] = useState(null);
  const [isCountryPickerOpen, setIsCountryPickerOpen] = useState(false);
  const [selectedCountry, setSelectedCountry] = useState('EMPTY');
  const [hasCountryBeenSet, setHasCountryBeenSet] = useState(false);
  const [selectedClass, setSelectedClass] = useState('');
  const [showClassSelector, setShowClassSelector] = useState(false);
  const navigate = useNavigate();
  const { t } = useLanguage();

  // ------------------------------------------------------------------------ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

useEffect(() => {
    let mounted = true;

    const loadInitialData = async () => {
      try {
        setLoading(true);
        const { data: { session } } = await supabase.auth.getSession();
        
        if (mounted && session?.user) {
          await loadUserData(session.user, mounted);
        } else if (mounted) {
          // üîê –†–ï–î–ò–†–ï–ö–¢ –ï–°–õ–ò –ù–ï–¢ –°–ï–°–°–ò–ò
          showSingleNotification('‚úó –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', true);
          setTimeout(() => navigate('/'), 1000);
          return;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        if (mounted) {
          showSingleNotification('‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', true);
        }
      } finally {
        if (mounted) {
          setLoading(false);
        }
      }
    };

    // –°–ª—É—à–∞–µ–º –¢–û–õ–¨–ö–û –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!mounted) return;

      // –†–µ–∞–≥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –Ω–∞ –≤—ã—Ö–æ–¥
      if (event === 'SIGNED_OUT') {
        setUserData(null);
        setLoading(false);
        showSingleNotification('‚úó –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', true);
        navigate('/');
      }
      // üîê –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ü–û–ß–¢–´ –ü–†–ò –í–•–û–î–ï
      else if (event === 'SIGNED_IN' && session?.user) {
        if (!session.user.email_confirmed_at && !session.user.confirmed_at) {
          showSingleNotification('‚úó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é', true);
          navigate('/');
        }
      }
    });

    loadInitialData();

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, [navigate]);

  // ------------------------------------------------------------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const loadUserData = async (user, mounted) => {
  try {
    setLoading(true);
    
    if (user) {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) {
        throw error;
      }

      // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—â–µ mounted
      if (!mounted) return;

      if (data) {
        const userStats = data.stats || null;

        setUserData({
          ...data,
          stats: userStats,
          battlefield_nickname: data.battlefield_nickname || '',
          country: data.country || 'EMPTY',
          countryName: data.countryName || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'
        });
        setEditedNickname(data.battlefield_nickname|| '');
        setSelectedCountry(data.country || 'EMPTY');
        setHasAgeBeenSet(!!data.birthDate);
        setHasCountryBeenSet(!!data.country && data.country !== 'EMPTY');
        checkNicknameCooldown(data);
      } else {
        if (mounted) { // ‚Üê –î–û–ë–ê–í–¨–¢–ï –ø—Ä–æ–≤–µ—Ä–∫—É
          showSingleNotification('‚úó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', true);
        }
      }
    } else {
      if (mounted) { // ‚Üê –î–û–ë–ê–í–¨–¢–ï –ø—Ä–æ–≤–µ—Ä–∫—É
        showSingleNotification('‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', true);
      }
    }
  } catch (error) {
    if (mounted) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      showSingleNotification('‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', true);
    }
  } finally {
    if (mounted) {
      setLoading(false);
    }
  }
};

  const handleCountrySelect = async (country) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
  if (hasCountryBeenSet) {
    showSingleNotification('‚úó –°—Ç—Ä–∞–Ω—É –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑', true);
    setIsCountryPickerOpen(false);
    return;
  }

  setSelectedCountry(country.code);
  setUserData(prev => ({
    ...prev,
    country: country.code,
    countryName: country.name
  }));
  setIsCountryPickerOpen(false);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const { data: { user } } = await supabase.auth.getUser();
  if (user) {
    const { error } = await supabase
      .from('users')
      .update({
        country: country.code,
        countryName: country.name,
        lastUpdate: new Date().toISOString()
      })
      .eq('id', user.id);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã:', error);
      showSingleNotification('‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã', true);
    } else {
      setHasCountryBeenSet(true);
      showSingleNotification('‚úì –°—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }
};

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ —Å–º–µ–Ω—É –Ω–∏–∫–Ω–µ–π–º–∞
  const checkNicknameCooldown = (userData) => {
    if (userData.lastNicknameChange) {
      const lastChange = new Date(userData.lastNicknameChange);
      const now = new Date();
      const monthInMs = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const timeSinceLastChange = now - lastChange;
      
      if (timeSinceLastChange < monthInMs) {
        setCanEditNickname(false);
        const daysLeft = Math.ceil((monthInMs - timeSinceLastChange) / (24 * 60 * 60 * 1000));
        setNicknameCooldown(daysLeft);
      } else {
        setCanEditNickname(true);
        setNicknameCooldown(null);
      }
    } else {
      setCanEditNickname(true);
    }
  };

  // -------------------------------------------------------------------------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞

const handleClassSelect = async (playerClass) => {
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (userData?.player_class === playerClass) {
    setShowClassSelector(false);
    return;
  }

  setShowClassSelector(false);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const { data: { user } } = await supabase.auth.getUser();
  if (user) {
    const { error } = await supabase
      .from('users')
      .update({
        player_class: playerClass,
        lastUpdate: new Date().toISOString()
      })
      .eq('id', user.id);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:', error);
      showSingleNotification('‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞', true);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setSelectedClass(userData?.player_class || '');
    } else {
      setUserData(prev => ({ ...prev, player_class: playerClass }));
      showSingleNotification(`‚úì –ö–ª–∞—Å—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${getClassName(playerClass)}`);
    }
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
const getClassName = (classKey) => {
  const classNames = {
    assault: '–®—Ç—É—Ä–º–æ–≤–∏–∫',
    medic: '–ú–µ–¥–∏–∫',
    support: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
    recon: '–†–∞–∑–≤–µ–¥—á–∏–∫',
    engineer: '–ò–Ω–∂–µ–Ω–µ—Ä'
  };
  return classNames[classKey] || classKey;
};

  // ------------------------------------------------------------------------ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞

const checkNicknameExists = async (nickname) => {
  try {
    const cleanNickname = nickname.trim();
    
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!cleanNickname) {
      showSingleNotification('‚úó –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º', true);
      return true;
    }
    
    if (/\s/.test(cleanNickname)) {
      showSingleNotification('‚úó –ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã', true);
      return true;
    }
    
    if (cleanNickname.length < 2) {
      showSingleNotification('‚úó –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞', true);
      return true;
    }

    if (cleanNickname.length > 20) {
      showSingleNotification('‚úó –ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤', true);
      return true;
    }

    const { data: { user } } = await supabase.auth.getUser();
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–∏–∫–Ω–µ–π–º—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const { data, error } = await supabase
      .from('users')
      .select('battlefield_nickname, id')
      .neq('id', user?.id);

    if (error) throw error;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (—É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã, –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
    const normalizeForComparison = (nick) => {
      return nick
        .toLowerCase()
        .replace(/[^a-z0-9]/g, ''); // —É–±–∏—Ä–∞–µ–º –í–°–ï –Ω–µ-–±—É–∫–≤—ã –∏ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    };

    const normalizedNewNick = normalizeForComparison(cleanNickname);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const nicknameExists = data.some(userData => {
      if (!userData.battlefield_nickname) return false;
      
      const normalizedExistingNick = normalizeForComparison(userData.battlefield_nickname);
      return normalizedExistingNick === normalizedNewNick;
    });

    if (nicknameExists) {
      showSingleNotification('‚úó –ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç', true);
      return true;
    }

    return false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞:', error);
    showSingleNotification('‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞', true);
    return true;
  }
};

// ------------------------------------------------------------------------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞

const saveNickname = async () => {
  if (!editedNickname.trim()) {
    showSingleNotification('‚úó –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º', true);
    return;
  }

  const cleanNickname = editedNickname.trim();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  if (!cleanNickname) {
    showSingleNotification('‚úó –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º', true);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º —Å–æ —Å—Ç–∞—Ä—ã–º (—É—á–∏—Ç—ã–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä)
  if (cleanNickname === (userData.battlefield_nickname || '')) {
    showSingleNotification('‚úó –≠—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º', true);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
  const nicknameExists = await checkNicknameExists(cleanNickname);
  if (nicknameExists) {
    return;
  }

  try {
    const { data: { user } } = await supabase.auth.getUser();
if (!user) {
  showSingleNotification('‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', true);
  return;
}

const { error } = await supabase
  .from('users')
  .update({
    battlefield_nickname: cleanNickname,
    lastNicknameChange: new Date().toISOString(),
    lastUpdate: new Date().toISOString()
  })
  .eq('id', user.id);

if (error) {
  throw error;
}

setUserData(prev => ({ 
  ...prev, 
  battlefield_nickname: cleanNickname,
  lastNicknameChange: new Date().toISOString()
}));

    setIsEditingNickname(false);
    setCanEditNickname(false);
    setNicknameCooldown(30);
    showSingleNotification('‚úì –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞:', error);
    showSingleNotification('‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞', true);
  }
};

  // ----------------------------------------------------------- –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  
  const editAge = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤–æ–∑—Ä–∞—Å—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (hasAgeBeenSet) {
      showSingleNotification('‚úó –í–æ–∑—Ä–∞—Å—Ç –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑', true);
      return;
    }

    const currentAge = userData?.birthDate ? calculateAge(new Date(userData.birthDate)) : null;
    

    // ------------------------------------------------ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã

    const modal = document.createElement('div');
    modal.className = 'date-picker-modal';
    modal.innerHTML = `
      <div class="date-picker-content">
        <h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</h3>
        <div class="date-picker-notice">
          –í–æ–∑—Ä–∞—Å—Ç –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!
        </div>
        <div class="date-picker-fields">
          <div class="date-field">
            <label>–î–µ–Ω—å</label>
            <select class="day-select">
              <option value="">–î–µ–Ω—å</option>
              ${Array.from({length: 31}, (_, i) => `<option value="${i + 1}">${i + 1}</option>`).join('')}
            </select>
          </div>
          <div class="date-field">
            <label>–ú–µ—Å—è—Ü</label>
            <select class="month-select">
              <option value="">–ú–µ—Å—è—Ü</option>
              <option value="1">–Ø–Ω–≤–∞—Ä—å</option>
              <option value="2">–§–µ–≤—Ä–∞–ª—å</option>
              <option value="3">–ú–∞—Ä—Ç</option>
              <option value="4">–ê–ø—Ä–µ–ª—å</option>
              <option value="5">–ú–∞–π</option>
              <option value="6">–ò—é–Ω—å</option>
              <option value="7">–ò—é–ª—å</option>
              <option value="8">–ê–≤–≥—É—Å—Ç</option>
              <option value="9">–°–µ–Ω—Ç—è–±—Ä—å</option>
              <option value="10">–û–∫—Ç—è–±—Ä—å</option>
              <option value="11">–ù–æ—è–±—Ä—å</option>
              <option value="12">–î–µ–∫–∞–±—Ä—å</option>
            </select>
          </div>
          <div class="date-field">
            <label>–ì–æ–¥</label>
            <select class="year-select">
              <option value="">–ì–æ–¥</option>
              ${Array.from({length: 100}, (_, i) => {
                const year = new Date().getFullYear() - 15 - i;
                return `<option value="${year}">${year}</option>`;
              }).join('')}
            </select>
          </div>
        </div>
        <div class="date-picker-preview">
          <span>–í–æ–∑—Ä–∞—Å—Ç: </span>
          <span class="age-preview">-</span>
        </div>
        <div class="date-picker-buttons">
          <button class="cancel-btn">–û—Ç–º–µ–Ω–∞</button>
          <button class="save-btn" disabled>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        </div>
      </div>
    `;

    document.body.appendChild(modal);
    modal.style.display = 'flex';

    const updateAgePreview = () => {
      const day = modal.querySelector('.day-select').value;
      const month = modal.querySelector('.month-select').value;
      const year = modal.querySelector('.year-select').value;
      
      if (day && month && year) {
        const birthDate = new Date(year, month - 1, day);
        const age = calculateAge(birthDate);
        
        if (age < 16) {
          modal.querySelector('.age-preview').textContent = '–ú–µ–Ω—å—à–µ 16 –ª–µ—Ç';
          modal.querySelector('.age-preview').style.color = '#ce2727';
          modal.querySelector('.save-btn').disabled = true;
        } else {
          modal.querySelector('.age-preview').textContent = displayAge(age);
          modal.querySelector('.age-preview').style.color = '#22b327';
          modal.querySelector('.save-btn').disabled = false;
        }
      }
    };

    modal.querySelector('.day-select').addEventListener('change', updateAgePreview);
    modal.querySelector('.month-select').addEventListener('change', updateAgePreview);
    modal.querySelector('.year-select').addEventListener('change', updateAgePreview);

    modal.querySelector('.cancel-btn').addEventListener('click', () => {
      document.body.removeChild(modal);
    });

    modal.querySelector('.save-btn').addEventListener('click', async () => {
  const day = modal.querySelector('.day-select').value;
  const month = modal.querySelector('.month-select').value;
  const year = modal.querySelector('.year-select').value;
  
  if (day && month && year) {
    const birthDate = new Date(year, month - 1, day);
    const age = calculateAge(birthDate);
    
    if (age < 16) {
      showSingleNotification('‚úó –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç - 16 –ª–µ—Ç', true);
      return;
    }
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      const { error } = await supabase
        .from('users')
        .update({
          birthDate: birthDate.toISOString(),
          lastUpdate: new Date().toISOString()
        })
        .eq('id', user.id);

      if (error) {
        throw error;
      }
      
      setUserData(prev => ({ ...prev, birthDate: birthDate.toISOString() }));
      setHasAgeBeenSet(true);
      showSingleNotification('‚úì –í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      document.body.removeChild(modal);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞:', error);
      showSingleNotification('‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞', true);
    }
  }
});

    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  };

  // ----------------------------------------------------------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

  const calculateAge = (birthDate) => {
  if (!birthDate) return null;
  const birth = new Date(birthDate);
  const today = new Date();
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

  const displayAge = (age) => {
    if (!age) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    let yearsText = '–ª–µ—Ç';
    if (age % 10 === 1 && age % 100 !== 11) yearsText = '–≥–æ–¥';
    else if ([2,3,4].includes(age % 10) && ![12,13,14].includes(age % 100)) yearsText = '–≥–æ–¥–∞';
    return `${age} ${yearsText}`;
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  const getPlayerStatus = () => {
    if (userData?.team && userData.team !== "free agent") {
      return {
        text: userData.team,
        color: '#22b327'
      };
    } else {
      return {
        text: '–°–≤–æ–±–æ–¥–Ω—ã–π –∞–≥–µ–Ω—Ç',
        color: '#b2ad9c'
      };
    }
  };

  if (loading) {
  return <div className="loading-profile">
    <div className="loading-container">
      <div className="spinner">
        <div className="spinner-circle"></div>
      </div>
      <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
    </div>
    </div>;
}

if (!userData) {
  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è
}

  const age = userData.birthDate ? calculateAge(userData.birthDate) : null;
  const playerStatus = getPlayerStatus();

   // -------------------------------------------------------------------------------------------------------- HTML ---------------------------------------------

  return (
     <>
      <SEO 
        title="Player Profile - AWL Battlefield 6 Your Cyberpsort Profile"
        description="View your Battlefield 6 player profile, statistics, achievements, and tournament history. Manage your esports career in Arena Warborn League."
        keywords="bf6 profile, player statistics, gaming achievements, esports career bf6"
        canonicalUrl="/profile"
      />
    <div className="content-index">
      <img className="profile-awl-background" src="/images/other/profile-background-awl.webp" alt="awl-logo-profile"/>

      <div className="fade-block">
        <img src="/images/other/profile-player-example.png" alt="awl-player-photo" className="masked-image"/>
      </div>

      <div className="player-information">
        <div className="info-section">
          <h3 className="section-title-profile">–ò–≥—Ä–æ–∫</h3>
          <div className="info-block first-block">
            <div className="nickname-and-class-container">
            {/* –ù–∏–∫ –∏–≥—Ä–æ–∫–∞ - —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className="nickname-container">
              {isEditingNickname ? (
                <div className="nickname-edit-container">
                  <input
                    className="name-player-style editable"
                    value={editedNickname}
                    onChange={(e) => setEditedNickname(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º"
                    maxLength={30}
                    autoFocus
                  />
                  <div className="nickname-edit-buttons">
                    <button 
                      className="nickname-save-btn"
                      onClick={saveNickname}
                    >
                      <img className="icons-redactor" src="/images/icons/icon-save.png" alt="save-options"/>
                    </button>
                    <button 
                      className="nickname-cancel-btn"
                      onClick={() => {
                        setIsEditingNickname(false);
                        setEditedNickname(userData.battlefield_nickname || '');
                      }}
                    >
                      <img className="icons-redactor" src="/images/icons/icon-redactor2.png" alt="back"/>
                    </button>
                  </div>
                </div>
              ) : (
                <div className="nickname-display-container">
                  <span className="name-player-style">
                    {userData.battlefield_nickname || '–ù–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'}
                  </span>
                  {canEditNickname && (
                    <button 
                      className="nickname-edit-btn"
                      onClick={() => setIsEditingNickname(true)}
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º"
                    >
                      <img className="icons-redactor" src="/images/icons/icon-redactor1.png" alt="choose-options"/>
                    </button>
                  )}
                  {!canEditNickname && nicknameCooldown && (
                    <span className="nickname-cooldown" title={`–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${nicknameCooldown} –¥–Ω–µ–π`}>
                      <img className="icons-redactor-time" src="/images/icons/icon-timeless.png" alt="change-time-is"/> {nicknameCooldown}–¥
                    </span>
                  )}
                </div>
              )}
            </div>
             {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∏–≥—Ä–æ–∫–∞ */}
<div className="class-selector-container">
  <div className="class-selector">
    <div 
      className="current-class"
      onClick={() => setShowClassSelector(!showClassSelector)}
      style={{ cursor: 'pointer' }}
    >
      <img 
        src={`/images/icons/icon-class-${userData?.player_class || 'assault'}.png`} 
        alt={userData?.player_class || 'assault'}
        className="class-icon-profile"
      />
    </div>
    
    {showClassSelector && (
      <div className="class-options-row">
        {['assault', 'medic', 'sniper', 'engineer'].map((playerClass) => (
          <div
            key={playerClass}
            className={`class-option ${userData?.player_class === playerClass ? 'selected' : ''}`}
            onClick={() => handleClassSelect(playerClass)}
          >
            <img 
              src={`/images/icons/icon-class-${playerClass}.png`} 
              alt={playerClass}
              className="class-icon-profile"
            />
          </div>
        ))}
      </div>
    )}
  </div>
</div>
</div>
            
            <div className="horizontal-row-1">
        <div className="info-player-style">
          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∫–æ–Ω–∫–∏ —Å—Ç—Ä–∞–Ω—ã - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ */}
          <div 
            className={`country-selector ${!hasCountryBeenSet ? 'clickable' : ''}`}
            onClick={!hasCountryBeenSet ? () => setIsCountryPickerOpen(true) : undefined}
            title={!hasCountryBeenSet ? "–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã" : "–°—Ç—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}
            style={{ 
              cursor: !hasCountryBeenSet ? 'pointer' : 'default', 
              display: 'flex', 
              alignItems: 'center',
              marginRight: '15px',
              justifyContent: 'center',
              width: '30px',
              height: '23px',
              opacity: hasCountryBeenSet ? 0.7 : 1
            }}
          >
            {/* –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–ª–∞–≥–æ–≤ —Å fallback */}
            {selectedCountry && selectedCountry !== 'EMPTY' ? (
              <Suspense fallback={
                <div style={{
                  width: '30px',
                  height: '23px',
                  backgroundColor: '#b2ad9c',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  borderRadius: '2px',
                  color: '#333',
                  fontSize: '12px'
                }}>
                  üåê
                </div>
              }>
                <Flag 
                  code={selectedCountry} 
                  style={{ 
                    borderRadius: '2px',
                    objectFit: 'cover'
                  }}
                  title={userData?.countryName || getCountryName(selectedCountry)}
                />
              </Suspense>
            ) : (
              <div style={{
                width: '30px',
                height: '23px',
                backgroundColor: '#b2ad9c',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                borderRadius: '2px',
                color: '#333',
                fontSize: '12px'
              }}>
                ?
              </div>
            )}
          </div>
    
          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ - –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π */}
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: 'flex-start'
          }}>
            <span style={{ 
              fontSize: '16px', 
              color: '#f6efd9',
              lineHeight: '1.2'
            }}>
              {userData?.fullname || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
            </span>
            {!hasCountryBeenSet && (
              <span style={{
                fontSize: '12px',
                color: '#b2ad9c',
                fontStyle: 'italic'
              }}>
                –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É
              </span>
            )}
          </div>
        </div>
              
              <div className="age-and-status-container">
                {/* –í–æ–∑—Ä–∞—Å—Ç - –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ */}
                <span 
                  className={`age-and-status-player-style ${!hasAgeBeenSet ? 'clickable' : ''}`} 
                  onClick={!hasAgeBeenSet ? editAge : undefined}
                  title={!hasAgeBeenSet ? "–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞" : "–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                >
                  {age ? displayAge(age) : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç'}
                </span>
                
                {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */}
                <span 
                  className="age-and-status-player-style" 
                  style={{ color: playerStatus.color }}
                >
                  {playerStatus.text}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
        <div className="info-section">
          <h3 className="section-title-profile">–ù–∞–≥—Ä–∞–¥—ã MVP</h3>
          <div className="info-block second-block">
            <div className="mvp-rewards-grid">
              <div className="mvp-reward-item">
                <img src="/images/medals/icon-medal1.png" className="reward-icon" alt="–ù–∞–≥—Ä–∞–¥–∞"/>
                <span className="reward-text">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∏–∑–æ–≤—ã–º –º–µ—Å—Ç–æ–º</span>
              </div>
              <div className="mvp-reward-item">
                <img src="/images/medals/icon-medal2.png" className="reward-icon" alt="–ù–∞–≥—Ä–∞–¥–∞"/>
                <span className="reward-text">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∏–∑–æ–≤—ã–º –º–µ—Å—Ç–æ–º</span>
              </div>
              <div className="mvp-reward-item">
                <img src="/images/medals/icon-medal3.png" className="reward-icon" alt="–ù–∞–≥—Ä–∞–¥–∞"/>
                <span className="reward-text">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∏–∑–æ–≤—ã–º –º–µ—Å—Ç–æ–º</span>
              </div>
              <div className="mvp-reward-item">
                <img src="/images/medals/icon-medal2.png" className="reward-icon" alt="–ù–∞–≥—Ä–∞–¥–∞"/>
                <span className="reward-text">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∏–∑–æ–≤—ã–º –º–µ—Å—Ç–æ–º</span>
              </div>
            </div>
          </div>
        </div>

        <div className="info-sections-container">
          <div className="info-section">
            <h3 className="section-title-profile">MMR</h3>
            <div className="info-block mmr-value">
            {userData.mmr !== undefined && userData.mmr !== null ? userData.mmr : 0}
            </div>
          </div>
          
          <div className="info-section">
            <h3 className="section-title-profile">–î–∏–≤–∏–∑–∏–æ–Ω</h3>
            <div className="svg-division-container">
              <svg className="svg-division-block" viewBox="0 0 302 92" preserveAspectRatio="none">
                <path 
                  d="M9,1 L286,1 L301,46 L286,91 L9,91 C4.58,91 1,87.42 1,83 L1,9 C1,4.58 4.58,1 9,1Z" 
                  fill="none" 
                  stroke="#ff6600" 
                  strokeWidth="2" 
                  strokeLinejoin="round"
                />
              </svg>
              <div className={`svg-division-content ${userData.division === "calibration" ? "calibration" : ""}`}>
      {userData.division === "calibration" ? "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞" : userData.division}
              </div>
            </div>
          </div>
        </div>

        <div className="stats-actions-container">
          <div className="info-section">
            <h3 className="section-title-profile">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </h3>
            <div className="info-block">
              <div className="stats-container">
                <div className="stats-column">
                  <div className="stat-item">
                    <span className="stat-label">{t('stats.kdRatio')}</span>
                    <span className="stat-value">{userData.stats?.kdRatio ?? t('stats.notAvailable')}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">{t('stats.winRate')}</span>
                    <span className="stat-value">{userData.stats?.winRate ? `${userData.stats.winRate}%` : t('stats.notAvailable')}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">{t('stats.playTime')}</span>
                    <span className="stat-value">{userData.stats?.playTime ?? t('stats.notAvailable')}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">{t('stats.favoriteWeapon')}</span>
                    <span className="stat-value">{userData.stats?.favoriteWeapon ?? t('stats.notAvailable')}</span>
                  </div>
                </div>
                
                <div className="stats-column">
                  <div className="stat-item">
                    <span className="stat-label">{t('stats.wins')}</span>
                    <span className="stat-value">{userData.stats?.wins ?? t('stats.notAvailable')}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">{t('stats.losses')}</span>
                    <span className="stat-value">{userData.stats?.losses ?? t('stats.notAvailable')}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</span>
                    <span className="stat-value">{t('stats.notAvailable')}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-label">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</span>
                    <span className="stat-value">{t('stats.notAvailable')}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="info-section">
            <div className="info-block">
              <div className="action-buttons-container">
                <button className="action-btn">
                  <span className="btn-text">–ö–æ–Ω—Ç–∞–∫—Ç—ã</span>
                </button>
                <button className="action-btn">
                  <span className="btn-text">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="info-section">
          <h3 className="section-title-profile">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
          <div className="info-block achievements-block">
            <div className="achievements-row">
              <div className="achievement-item">
                <img src="/images/icons/icon-not-information.png" className="achievement-icon" alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 1"/>
              </div>
              <div className="achievement-item">
                <img src="/images/icons/icon-not-information.png" className="achievement-icon" alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 2"/>
              </div>
              <div className="achievement-item">
                <img src="/images/icons/icon-not-information.png" className="achievement-icon" alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 3"/>
              </div>
              <div className="achievement-item">
                <img src="/images/icons/icon-not-information.png" className="achievement-icon" alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 4"/>
              </div>
              <div className="achievement-item">
                <img src="/images/icons/icon-not-information.png" className="achievement-icon" alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 5"/>
              </div>
              <div className="achievement-item">
                <img src="/images/icons/icon-not-information.png" className="achievement-icon" alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 6"/>
              </div>
            </div>
          </div>
        </div>
      </div>
       {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã */}
      <CountryPicker
        isOpen={isCountryPickerOpen}
        onClose={() => setIsCountryPickerOpen(false)}
        currentCountry={selectedCountry}
        onCountrySelect={handleCountrySelect}
        disabled={hasCountryBeenSet} // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–ø—Å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
      />
    </div>
    </>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
const getCountryName = (countryCode) => {
  const countryList = [
    { code: 'ru', name: '–†–æ—Å—Å–∏—è' },
    { code: 'us', name: '–°–®–ê' },
    { code: 'de', name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
    { code: 'fr', name: '–§—Ä–∞–Ω—Ü–∏—è' },
    { code: 'gb', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è' },
    { code: 'jp', name: '–Ø–ø–æ–Ω–∏—è' },
    { code: 'kr', name: '–ö–æ—Ä–µ—è' },
    { code: 'cn', name: '–ö–∏—Ç–∞–π' },
    { code: 'br', name: '–ë—Ä–∞–∑–∏–ª–∏—è' },
    { code: 'in', name: '–ò–Ω–¥–∏—è' },
    { code: 'ca', name: '–ö–∞–Ω–∞–¥–∞' },
    { code: 'au', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è' },
    { code: 'it', name: '–ò—Ç–∞–ª–∏—è' },
    { code: 'es', name: '–ò—Å–ø–∞–Ω–∏—è' },
    { code: 'ua', name: '–£–∫—Ä–∞–∏–Ω–∞' },
    { code: 'kz', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
    { code: 'by', name: '–ë–µ–ª–∞—Ä—É—Å—å' },
    { code: 'pl', name: '–ü–æ–ª—å—à–∞' },
    { code: 'tr', name: '–¢—É—Ä—Ü–∏—è' },
    { code: 'nl', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã' },
    { code: 'se', name: '–®–≤–µ—Ü–∏—è' },
    { code: 'no', name: '–ù–æ—Ä–≤–µ–≥–∏—è' },
    { code: 'fi', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è' },
    { code: 'dk', name: '–î–∞–Ω–∏—è' },
    { code: 'mx', name: '–ú–µ–∫—Å–∏–∫–∞' },
    { code: 'id', name: '–ò–Ω–¥–æ–Ω–µ–∑–∏—è' },
    { code: 'sa', name: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è' },
    { code: 'za', name: '–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞' },
    { code: 'eg', name: '–ï–≥–∏–ø–µ—Ç' },
    { code: 'ar', name: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞' },
    { code: 'pt', name: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è' },
    { code: 'gr', name: '–ì—Ä–µ—Ü–∏—è' },
    { code: 'cz', name: '–ß–µ—Ö–∏—è' },
    { code: 'ch', name: '–®–≤–µ–π—Ü–∞—Ä–∏—è' },
    { code: 'at', name: '–ê–≤—Å—Ç—Ä–∏—è' },
    { code: 'be', name: '–ë–µ–ª—å–≥–∏—è' },
    { code: 'il', name: '–ò–∑—Ä–∞–∏–ª—å' },
    { code: 'th', name: '–¢–∞–∏–ª–∞–Ω–¥' },
    { code: 'vn', name: '–í—å–µ—Ç–Ω–∞–º' },
    { code: 'my', name: '–ú–∞–ª–∞–π–∑–∏—è' },
    { code: 'sg', name: '–°–∏–Ω–≥–∞–ø—É—Ä' },
    { code: 'ph', name: '–§–∏–ª–∏–ø–ø–∏–Ω—ã' },
    { code: 'ie', name: '–ò—Ä–ª–∞–Ω–¥–∏—è' },
    { code: 'hu', name: '–í–µ–Ω–≥—Ä–∏—è' },
    { code: 'ro', name: '–†—É–º—ã–Ω–∏—è' },
    { code: 'bg', name: '–ë–æ–ª–≥–∞—Ä–∏—è' },
    { code: 'hr', name: '–•–æ—Ä–≤–∞—Ç–∏—è' },
    { code: 'rs', name: '–°–µ—Ä–±–∏—è' },
    { code: 'sk', name: '–°–ª–æ–≤–∞–∫–∏—è' },
    { code: 'si', name: '–°–ª–æ–≤–µ–Ω–∏—è' },
    { code: 'ee', name: '–≠—Å—Ç–æ–Ω–∏—è' },
    { code: 'lv', name: '–õ–∞—Ç–≤–∏—è' },
    { code: 'lt', name: '–õ–∏—Ç–≤–∞' },
    { code: 'is', name: '–ò—Å–ª–∞–Ω–¥–∏—è' },
    { code: 'lu', name: '–õ—é–∫—Å–µ–º–±—É—Ä–≥' },
    { code: 'mt', name: '–ú–∞–ª—å—Ç–∞' },
  ];
  
  const country = countryList.find(c => c.code === countryCode);
  return country ? country.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

export default Profile;