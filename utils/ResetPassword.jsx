import { useState, useEffect } from 'react';
import { supabase } from '../src/supabase';
import { useLanguage } from '/utils/language-context.jsx';
import { showSingleNotification } from '/utils/notifications';
import Footer from '../src/components/footer/footer';
import FeedbackModal from '../src/components/feedbackmodal/feedbackmodal.jsx';
import './ResetPassword.css';

const ResetPassword = () => {
  const { currentLanguage, changeLanguage, t } = useLanguage();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [isFeedbackOpen, setFeedbackOpen] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isValidAccess, setIsValidAccess] = useState(false);
  const [isCheckingAccess, setIsCheckingAccess] = useState(true);

  const handleLanguageChange = (lang) => {
    changeLanguage(lang);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  useEffect(() => {
    const checkAccess = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º hash –∏–∑ URL (Supabase –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤ hash)
        const hash = window.location.hash;
        
        if (!hash || !hash.includes('type=recovery')) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ hash, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          showSingleNotification(t('use_reset_link'), true);
          setTimeout(() => {
            window.location.href = '/';
          }, 3000);
          return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ hash
        const { data, error } = await supabase.auth.getSession();
        
        if (error || !data.session) {
          showSingleNotification(t('session_expired'), true);
          setTimeout(() => {
            window.location.href = '/';
          }, 3000);
          return;
        }

        // –ï—Å–ª–∏ –≤—Å–µ –æ–∫, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        setIsValidAccess(true);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
        showSingleNotification('‚úó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', true);
        setTimeout(() => {
          window.location.href = '/';
        }, 3000);
      } finally {
        setIsCheckingAccess(false);
      }
    };

    checkAccess();
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç boolean)
  const validatePasswordRealTime = (value) => {
    if (!value) return true; // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    return value.length >= 8 && 
           /(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(value);
  };

  const validatePasswordMatch = (password, confirmPassword) => {
    if (!confirmPassword) return true; // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    return password === confirmPassword;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
  const checkPasswordMatch = () => {
    const passwordInput = document.getElementById('new-password');
    const confirmInput = document.getElementById('confirm-new-password');
    
    if (!passwordInput || !confirmInput) return;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = validatePasswordRealTime(password);
    passwordInput.classList.remove('valid-input', 'invalid-input');
    if (password) {
      if (!isPasswordValid) {
        passwordInput.classList.add('invalid-input');
      } else {
        passwordInput.classList.add('valid-input');
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const isMatchValid = validatePasswordMatch(password, confirmPassword);
    confirmInput.classList.remove('valid-input', 'invalid-input');
    if (confirmPassword) {
      if (!isMatchValid) {
        confirmInput.classList.add('invalid-input');
      } else {
        confirmInput.classList.add('valid-input');
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
    setError('');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  const handleConfirmPasswordChange = (e) => {
    setConfirmPassword(e.target.value);
    setError('');
  };

  const handleResetPassword = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    if (password !== confirmPassword) {
      setError(t('errors.passwords_mismatch'));
      setLoading(false);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    if (password.length < 8) {
      setError(t('errors.password_length'));
      setLoading(false);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
      setError(t('errors.password_complexity'));
      setLoading(false);
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: password
      });

      if (error) throw error;

      showSingleNotification(`‚úì ${t('password_updated')}`);
      setTimeout(() => {
        window.location.href = '/';
      }, 2000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π
  useEffect(() => {
    checkPasswordMatch();
  }, [password, confirmPassword]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loader –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
  if (isCheckingAccess) {
    return (
      <div className="loading-container">
      <div className="spinner">
        <div className="spinner-circle"></div>
      </div>
      <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞..</p>
    </div>
    );
  }
  
  // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  if (!isValidAccess) {
    return (
      <div className="registration-page-reset-password">
        <div className="language-switcher">
          <img 
            src="/images/icons/icon-rus.png" 
            alt="Russian" 
            className={`language-flag ${currentLanguage === 'ru' ? 'active' : ''}`} 
            data-lang="ru" 
            onClick={() => handleLanguageChange('ru')}
          />
          <img 
            src="/images/icons/icon-usa.png" 
            alt="English" 
            className={`language-flag ${currentLanguage === 'en' ? 'active' : ''}`} 
            data-lang="en" 
            onClick={() => handleLanguageChange('en')}
          />
        </div>
        
        <div className="main-content-registration-reset-password">
        </div>

        <Footer 
          onFeedbackClick={() => setFeedbackOpen(true)} 
        />
        <FeedbackModal 
          isOpen={isFeedbackOpen}
          onClose={() => setFeedbackOpen(false)}
        />
      </div>
    );
  }

  return (
    <div className="registration-page-reset-password">
      <div className="language-switcher">
        <img 
          src="/images/icons/icon-rus.png" 
          alt="Russian" 
          className={`language-flag ${currentLanguage === 'ru' ? 'active' : ''}`} 
          data-lang="ru" 
          onClick={() => handleLanguageChange('ru')}
        />
        <img 
          src="/images/icons/icon-usa.png" 
          alt="English" 
          className={`language-flag ${currentLanguage === 'en' ? 'active' : ''}`} 
          data-lang="en" 
          onClick={() => handleLanguageChange('en')}
        />
      </div>
      
      <div className="main-content-registration-reset-password">
        <div className="registration-container-reset-password">
          <form onSubmit={handleResetPassword} className='form-reset-password'>
            <h1>{t('reset_password_title')}</h1>
            
            {error && <div className="error-message global-error">{error}</div>}
            
            <div className="form-group">
              <label htmlFor="new-password">
                {t('new_password_label')}
                <button 
                  type="button" 
                  className="toggle-password"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                </button>
              </label>
              <input 
                type={showPassword ? 'text' : 'password'} 
                id="new-password"
                value={password}
                onChange={handlePasswordChange}
                placeholder={t('new_password_placeholder')}
                required
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="confirm-new-password">
                {t('confirm_new_password_label')}
              </label>
              <input 
                type={showConfirmPassword ? 'text' : 'password'} 
                id="confirm-new-password"
                value={confirmPassword}
                onChange={handleConfirmPasswordChange}
                placeholder={t('confirm_new_password_placeholder')}
                required
              />
            </div>
            
            <button type="submit" className="next-btn" disabled={loading}>
              {loading ? '...' : (
                <img src="/images/icons/icon-strelka.png" alt="–ò–∫–æ–Ω–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏" className="button-icon-strelka" />
              )}
            </button>
          </form>
        </div>
      </div>

      <Footer 
        onFeedbackClick={() => setFeedbackOpen(true)} 
      />
      <FeedbackModal 
        isOpen={isFeedbackOpen}
        onClose={() => setFeedbackOpen(false)}
      />
    </div>
  );
};

export default ResetPassword;